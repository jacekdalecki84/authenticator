{"version":3,"file":"main.9d2b0520d11fbb97a527.bundle.js","sources":["webpack:///../src/auth-widget.js"],"sourcesContent":["/* eslint-disable no-console */\n/**\n * Turns an element into a widget, which opens up a verification popup and gives\n * it event listeners.\n */\n\n// eslint-disable-next-line no-undef\nconst globalOptions = {\n  baseUrl: BASE_URL, // eslint-disable-line no-undef\n  debug: DEBUG, // eslint-disable-line no-undef\n};\n\nconst apiVersion = 'v1';\nconst authenticators = {};\nconst authenticatorsByElement = {};\nlet authenticatorIframe;\nlet popup;\n\n// IE hax\nconst nav = navigator.userAgent.toLowerCase();\nlet isIE = false;\n// eslint-disable-next-line no-unused-vars\nlet ieVersion;\n\nif (nav.indexOf('msie') !== -1) { // IE < 11\n  isIE = true;\n  ieVersion = parseInt(nav.split('msie')[1], 10);\n} else if (nav.indexOf('trident/') !== -1) { // IE 11+\n  isIE = true;\n  ieVersion = parseInt(nav.split('rv:')[1], 10);\n}\n\nwindow.addEventListener('message', (message) => {\n  const namespace = 'kloudless:';\n  const { debug, baseUrl } = globalOptions;\n  if (debug) {\n    console.log('[DEBUG] Message received', message);\n  }\n\n  // check if message has kloudless namespace\n  if (typeof (message.data) !== 'string'\n      || message.data.indexOf(namespace) !== 0) {\n    // if the message is from other app, ignore it\n    return;\n  }\n\n  if (message.origin !== baseUrl) {\n    console.log('[ERROR] Origin mismatch:', message);\n    return;\n  }\n\n  const contents = JSON.parse(message.data.substring(namespace.length));\n  if (contents.type !== 'authentication') {\n    console.log('[ERROR] Incorrect content type:', message);\n    return;\n  }\n\n  setTimeout(() => {\n    const auth = authenticators[contents.id];\n    if (auth) {\n      auth.callback(contents.data);\n    } else {\n      console.log('[ERROR] No Authenticator found for ID:', contents.id);\n    }\n  }, 0);\n\n  if (isIE) {\n    message.source.postMessage(`kloudless:${JSON.stringify({\n      type: 'close',\n    })}`, message.origin);\n  } else if (popup) {\n    popup.close();\n    popup = undefined;\n  }\n\n  if (debug) {\n    console.log('[DEBUG] Confirmation sent', message.origin);\n  }\n}, false);\n\n/*\n * Older services page auth.\n */\nconst servicesPathFromParams = function servicesPathFromParams(params) {\n  let path = '/services/';\n\n  if (typeof params.services === 'string') {\n    params.services = [params.services];\n  }\n\n  if (params.services === undefined) {\n    path += '?';\n  } else if (params.services.length === 1) {\n    path += `${params.services[0]}?`;\n  } else if (params.services.length > 1) {\n    path += `?services=${params.services.map(e => e.trim()).join(',')}&`;\n  }\n  path += `app_id=${params.app_id\n  }&admin=${params.admin ? 1 : ''\n  }&extra=${params.extra ? params.extra : ''\n  }&callback=&retrieve_account_key=`;\n\n  // Used for Kloudless Enterprise proxying\n  if (params.group) {\n    path += `&group=${params.group}`;\n  }\n\n  if (params.edit_account) {\n    path += `&edit_account=${params.edit_account}`;\n  }\n\n  if (params.developer) path += '&developer=true';\n\n  return path;\n};\n\n/*\n * OAuth first-leg path.\n */\nconst oauthPathFromParams = function oauthPathFromParams(params) {\n  let path = `/${apiVersion}/oauth/?`;\n\n  params.redirect_uri = 'urn:ietf:wg:oauth:2.0:oob';\n  params.response_type = 'token';\n  params.state = parseInt(Math.random() * (10 ** 10), 10);\n\n  Object.keys(params).forEach((key) => {\n    let val = params[key];\n\n    // Special checks\n    if (key === 'scopes' && val.join) { val = val.join(' '); }\n\n    path += `&${key}=${val}`;\n  });\n\n  return path;\n};\n\nconst addIframe = function addIframe() {\n  const { baseUrl } = globalOptions;\n  if (authenticatorIframe !== undefined) {\n    authenticatorIframe.setAttribute('src', `${baseUrl}/static/iexd.html`);\n    return;\n  }\n\n  const iframe = document.createElement('iframe');\n  iframe.setAttribute('id', 'kloudless_iexd');\n  iframe.setAttribute('src', `${baseUrl}/static/iexd.html`);\n  iframe.style.display = 'none';\n  document.getElementsByTagName('body')[0].appendChild(iframe);\n\n  authenticatorIframe = iframe;\n};\n\n/*\n * Old callback requires errors in the first parameter\n */\nconst wrapServicesCallback = function wrapServicesCallback(callback) {\n// eslint-disable-next-line func-names\n  return function (data) {\n    callback(null, data);\n  };\n};\n\n/*\n * Loads a URL via an Ajax GET request.\n */\nfunction load(url, headers, callback) {\n  let xhr;\n\n  if (typeof XMLHttpRequest !== 'undefined') {\n    xhr = new XMLHttpRequest();\n  } else {\n    const versions = ['MSXML2.XmlHttp.5.0',\n      'MSXML2.XmlHttp.4.0',\n      'MSXML2.XmlHttp.3.0',\n      'MSXML2.XmlHttp.2.0',\n      'Microsoft.XmlHttp'];\n\n    for (let i = 0, len = versions.length; i < len; i += 1) {\n      try {\n        // eslint-disable-next-line no-undef\n        xhr = new ActiveXObject(versions[i]);\n        break;\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n    }\n  }\n\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState === 4) {\n      callback(xhr);\n    }\n  };\n\n  xhr.open('GET', url, true);\n\n  if (headers && xhr.setRequestHeader) {\n    Object.keys(headers).forEach((k) => {\n      xhr.setRequestHeader(k, headers[k]);\n    });\n  }\n\n  xhr.send('');\n}\n\n/*\n * OAuth callback needs additional account information.\n */\nconst wrapOAuthCallback = function wrapOAuthCallback(callback, state) {\n// eslint-disable-next-line func-names,consistent-return\n  return function (data) {\n    const { baseUrl } = globalOptions;\n    if (!data.state || data.state.toString() !== state.toString()) {\n      return callback({ error: 'invalid_state' });\n    }\n\n    if (!data.access_token) { return callback(data); }\n\n    const headers = {\n      Authorization: `Bearer ${data.access_token}`,\n      'X-Kloudless-Source': 'authenticator',\n    };\n\n    // Verify token, and obtain account data.\n    load(\n      `${baseUrl}/${apiVersion}/oauth/token/`,\n      headers, (tokenXHR) => {\n        if (tokenXHR.status !== 200) { callback(data); }\n\n        // Safe to skip client_id checks here based on how this method is called\n        const accountID = JSON.parse(tokenXHR.responseText).account_id;\n\n        load(\n          `${baseUrl}/${apiVersion}/accounts/${\n            accountID}/?retrieve_full=False`,\n          headers, (accountXHR) => {\n            if (accountXHR.status === 200) {\n              data.account = JSON.parse(accountXHR.responseText);\n            }\n            callback(data);\n          },\n        );\n      },\n    );\n  };\n};\n\n/**\n * Stop a widget from listening.\n * @param  Element  element The widget\n */\nconst stop = function stop(element) {\n  if (window.jQuery !== undefined && element instanceof window.jQuery) {\n    // eslint-disable-next-line no-param-reassign\n    element = element.get(0);\n  }\n  const authID = authenticatorsByElement[element.outerHTML];\n  if (authID) {\n    const auth = authenticators[authID];\n    element.removeEventListener('click', auth.clickHandler);\n    delete authenticators[authID];\n    delete authenticatorsByElement[element.outerHTML];\n  } else {\n    console.log('No click listener found to remove.');\n  }\n};\n\n/**\n * Turn an element into a widget\n *\n * Overloaded forms:\n *\n * First:\n * @param  Element  element   The element to turn into a widget and set a click\n *                            handler on to launch.\n * @param  Object   options   A hash of parameters to encode into the GET\n *                            querystring\n * @param  Function callback  A response handler of signature function(result)\n *\n * Second, to not auto-launch the authenticator:\n *\n * @param  Object   options   A hash of parameters to encode into the GET\n *                            querystring\n * @param  Function callback  A response handler of signature function(result)\n */\nconst authenticator = function authenticator(element, options, callback) {\n  if (window.Kloudless && window.Kloudless.baseUrl) {\n    // backward compatible\n    globalOptions.baseUrl = window.Kloudless.baseUrl;\n  }\n\n  const { baseUrl, debug } = globalOptions;\n\n  addIframe();\n\n  if (window.jQuery !== undefined && element instanceof window.jQuery) {\n    // eslint-disable-next-line no-param-reassign\n    element = element.get(0);\n  }\n\n  if (element && !(element instanceof Element)) {\n    if (callback) {\n      throw new Error(\"'element' must be an Element or jQuery object.\");\n    }\n\n    // Shift arguments right once.\n    callback = options; // eslint-disable-line no-param-reassign\n    options = element; // eslint-disable-line no-param-reassign\n    element = null; // eslint-disable-line no-param-reassign\n  }\n\n  if (!options.client_id && !options.app_id) {\n    throw new Error('An App ID is required.');\n  }\n\n  let path;\n  if (options.app_id) {\n    path = servicesPathFromParams(options);\n    // eslint-disable-next-line no-param-reassign\n    callback = wrapServicesCallback(callback);\n  } else {\n    path = oauthPathFromParams(options);\n    // eslint-disable-next-line no-param-reassign\n    callback = wrapOAuthCallback(callback, options.state);\n  }\n\n  const requestId = parseInt(Math.random() * (10 ** 10), 10);\n  const origin = `${window.location.protocol}//${window.location.host}`;\n\n  path += `&request_id=${requestId}`;\n  path += `&origin=${encodeURIComponent(origin)}`;\n\n  if (debug) {\n    console.log('[DEBUG]', 'Path is', baseUrl + path);\n  }\n\n  const clickHandler = function clickHandler() {\n    const height = 600;\n    const width = 1000;\n    // eslint-disable-next-line no-restricted-globals\n    const top = ((screen.height - height) / 2) - 50;\n    // eslint-disable-next-line no-restricted-globals\n    const left = (screen.width - width) / 2;\n    const popupParams = 'resizable,scrollbars,status,'\n      + `height=${height},width=${width},top=${top},left=${left}`;\n\n    // If IE, rely on postmessaging, otherwise just open popup normally\n    if (isIE) {\n      const data = {\n        type: 'prepareToOpenAuthenticator',\n        url: baseUrl + path,\n        params: popupParams,\n      };\n      const iframe = authenticatorIframe;\n      iframe.contentWindow.postMessage(\n        `kloudless:${JSON.stringify(data)}`,\n        iframe.src,\n      );\n\n      iframe.style.position = 'fixed';\n      iframe.style.display = 'block';\n      iframe.style.height = '100%';\n      iframe.style.width = '100%';\n      iframe.style.top = '0';\n      iframe.style.bottom = '0';\n      iframe.style.left = '0';\n      iframe.style.right = '0';\n\n      // Fade the iframe out within 3 seconds.\n      // 3 seconds = (120 ms * ((1 - 0.75) / 0.01))\n      let op = 1;\n      const timer = setInterval(() => {\n        if (op <= 0.75) {\n          clearInterval(timer);\n          iframe.style.display = 'none';\n        }\n        iframe.style.opacity = op;\n        iframe.style.filter = `alpha(opacity=${op * 100})`;\n        op -= op * 0.01;\n      }, 120);\n    } else {\n      popup = window.open(\n        baseUrl + path,\n        'kPOPUP', popupParams,\n      );\n      popup.focus();\n    }\n  };\n\n  if (element\n    && authenticatorsByElement[element.outerHTML] !== undefined) {\n    stop(element);\n  }\n\n  authenticators[requestId] = {\n    clickHandler,\n    callback,\n  };\n\n  if (element) {\n    authenticatorsByElement[element.outerHTML] = requestId;\n    element.addEventListener('click', clickHandler);\n  }\n\n  return {\n    launch: clickHandler,\n  };\n};\n\nfunction setGlobalOptions(newOption = {}) {\n  const { baseUrl, debug } = newOption;\n  if (baseUrl) {\n    // backward-compatible\n    if (window.Kloudless) {\n      window.Kloudless.baseUrl = baseUrl;\n    }\n    if (authenticatorIframe !== undefined) {\n      authenticatorIframe.setAttribute('src', `${baseUrl}/static/iexd.html`);\n    }\n    globalOptions.baseUrl = baseUrl;\n  }\n  if (debug) {\n    globalOptions.debug = debug;\n  }\n}\n\nfunction getGlobalOptions() {\n  return { ...globalOptions };\n}\n\nexport default {\n  authenticator,\n  stop,\n  apiVersion,\n  getGlobalOptions,\n  setGlobalOptions,\n};\n"],"mappings":"AAOA","sourceRoot":""}